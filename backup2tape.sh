#! /bin/bash

# Lazy Colors
C_NONE="\033[0m"
C_RED="\033[0;31m"
C_BLUE="\033[0;34m"
C_GREEN="\033[0;32m"
C_YELLOW="\033[1;33m"
C_CYAN="\033[0;36m"
C_ORANGE="\033[0;33m"

# Fancy Line printing.
function printLine {
  echo -e "  ├ $*"
}

function printHeader {
  echo -e "  ┌──══ ${C_GREEN}$*${C_NONE}"
}

function printEnd {
  echo -e "  └──── "
}

printHeader "backup2tape"


#  Config. Dont touch these, override with config file
MODULE_BASE="/media"
BASE="/home/chris/Documents/LTO"
TAPE_DEVICE="/dev/nst0"

if [ -e "config" ] ; then
  printLine "Local config round, loading."
  . config
else
  printLine "Using default configuration."
fi

##
#
#
##

die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option()
{
  local first_option all_short_options='d'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_device="${TAPE_DEVICE}"


print_help()
{
  printf 'Usage: %s [-d|--device <arg>] <module> \n' "$0"
  printf '\t%s\n' "<module>: what module to back up"
  printf '\t%s\n' "-d, --device: specify a tape device (default: '${TAPE_DEVICE}')"
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -d|--device)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_device="$2"
        shift
        ;;
      --device=*)
        _arg_device="${_key##--device=}"
        ;;
      -d*)
        _arg_device="${_key##-d}"
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


handle_passed_args_count()
{
  local _required_args_string="'module'"
  test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
  test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names="_arg_module"

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


##
#
#
##


# ] <-- needed because of Argbash


MODULE=${_arg_module}
# TAPE=${_arg_tape}
TAPE=$(sudo sg_read_attr -q -f 0x0401 /dev/nst0 | awk -F 'Medium serial number: ' ' { print $2 } ' | awk ' { print $1 }')
printLine "Device : ${TAPE_DEVICE}"
printLine "Tape   : ${TAPE}"
printLine "Module : ${MODULE}"

if [ "$(mt -f /dev/nst0 status | grep 'DR_OPEN IM_REP_EN' | wc -l)" == '1' ] ; then
  printLine "No tape is inserted, aborting."
  printEnd
  exit 0
fi

if [ -c "${TAPE_DEVICE}" ] ; then
  printLine "Tape Device ${TAPE_DEVICE} found."
else
  printLine "Tape Device ${TAPE_DEVICE} not found!"
  printEnd
  exit 2
fi

# Get current tape position.
TAPE_POS=$(mt -f ${TAPE_DEVICE} status | grep 'File number=' | awk -F'File number=' ' { print $2 } ' | awk -F',' ' { print $1 } ')

# Check if the tape is known to us.
if [ ! -e "${BASE}/${TAPE}.track" ] ; then
  # Fresh tape.
  printLine "New tape, starting from BOT."
  TRACK='0'
else
  # Known track.
  CUR_POS=$(cat ${BASE}/${TAPE}.track)
  # let CUR_POS=CUR_POS+1
  let fsf_count=CUR_POS-TAPE_POS
  #printLine "Known tape, continuing at ${CUR_POS}, currently at ${TAPE_POS}, need to forward ${fsf_count} marks!"

  # Check if we need to move the tape.
  if [ "${TAPE_POS}" != "${CUR_POS}" ] ;then
    printLine "Known tape, continuing at ${CUR_POS}, currently at ${TAPE_POS}, need to forward ${fsf_count} marks!"
    # mt -f ${TAPE_DEVICE} rewind
    #exit 0
    mt -f ${TAPE_DEVICE} fsf ${fsf_count}

    TAPE_POS=$(mt -f ${TAPE_DEVICE} status | grep 'File number=' | awk -F'File number=' ' { print $2 } ' | awk -F',' ' { print $1 } ')
    printLine "Tape is now at position ${TAPE_POS}."
  else
    printLine "Known tape, continuing at ${CUR_POS}, currently at ${TAPE_POS}, no spooling required."
  fi
  TRACK="${CUR_POS}"
fi

#exit 0

OPTIONS="--listed-incremental=${BASE}/${MODULE}.diff -M --index-file=${BASE}/${MODULE}-${TAPE}-${TRACK}.idx -cvf ${TAPE_DEVICE}"

# Free space on tape.
# sudo sg_read_attr /dev/nst0 |  grep 'Remaining capacity in partition' | awk ' { print $6 } '

if [ "${MODULE}" == "rsnapshot" ] ; then
	MODULE="${MODULE}/daily.0"
fi

cd "${MODULE_BASE}" || exit 2
# mt -f ${TAPE_DEVICE} status
tar ${OPTIONS} ${MODULE} || exit 2
# mt -f ${TAPE_DEVICE} weof
# mt -f ${TAPE_DEVICE} status

CUR_POS=$(mt -f ${TAPE_DEVICE} status | grep 'File number=' | awk -F'File number=' ' { print $2 } ' | awk -F',' ' { print $1 } ') || exit 2
printLine "Dump OK."

echo ${CUR_POS} > ${BASE}/${TAPE}.track
printEnd
